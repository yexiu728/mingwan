package study.day8;

public class Test0 {
/*

test1：
    接口：
        接口interface 不是类class
        接口比抽象类更抽象——抽象类是对类的抽象，接口是对行为的抽象
        接口中只能含有非抽象方法、默认方法、静态方法（JDK1.8）
            JDK1.9 可以还包含私有方法
        public interface 接口名称 {
            // 抽象方法
            // 默认方法
            // 静态方法
            // 私有方法
        }
    多实现
        子类实现父接口，要么声明成抽象类，要么实现接口中所有的抽象方法，
            继承了接口的默认方法，即可以直接调用，也可以重写。
        抽象方法：需要实现所有接口的所有抽象方法，如果抽象方法重名，只需重写一次
        默认方法：重名的默认方法必须重写，不重名的默认方法不用重写
        静态方法：静态方法只能通过各自的接口名称调用，不会出现重名冲突
        优先级：当一个类，既继承一个父类，又实现若干个接口时，
            父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。
    多继承
        只有接口才能多继承接口，类只能单继承
    接口成员特点
        接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰
            常量命名必须大写，如果遇到驼峰式，则加上下划线_：USER_NAME
        接口没有构造方法，不能创建对象
        接口没有静态代码块

    接口和抽象类的区别

test2：
    多态： 是指同一行为，具有多个不同表现形式。
    前提
        1. 继承或者实现【二选一】
        2. 方法的重写【意义体现：不重写，无意义】
        3. 父类引用指向子类对象【格式体现】
            父类类型 变量名 = new 子类对象;
    调用方法：
        当使用多态方式调用方法时，首先检查父类中是否有该方法，
        如果没有，则编译错误；如果有，执行的是子类重写后方法。
    多态的好处：
        实际开发的过程中，父类类型作为方法形式参数，
        传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利。
    引用类型转换：
        向上转型：
            多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。
            当父类引用指向一个子类对象时，便是向上转型。
                父类类型 变量名 = new 子类类型();
        向下转型：
            父类类型向子类类型向下转换的过程，这个过程是强制的。
            一个已经向上转型的子类对象，将父类引用转为子类引用，
            可以使用强制类型转换的格式，便是向下转型。
                子类类型 变量名 = (子类类型) 父类变量名;
    instanceof
        变量名 instanceof 数据类型
        如果变量属于该数据类型，返回true。
        如果变量不属于该数据类型，返回false。

异常：
    空指针 NullPointerException
    数组越界 ArrayIndexOutOfException
    类型转换异常 ClassCaseException

test3：
    抽象类 extends  abstract
        包含抽象方法的一定是抽象类，但是抽象类不一定包含抽象方法
        子类如果继承抽象类，要么实现父类中所有的抽象方法，要么把自己定义成抽象类
        抽象类不能实例化，只能实例化它的实现类
        抽象类可以有构造方法，构造方法不能被继承
    接口 interface  implement
        接口就是比抽象类更抽象
        接口不是类
        接口包含抽象方法，默认方法，静态方法，私有方法(JDK1.9)
        接口没有构造函数，也不能实例化
        接口中的成员变量叫做常量(public static final)
        单继承 (类与类) 多实现 (类与接口)
        接口和接口之间可以多继承，类和类之间不能多继承



ctrl + shift + u 大小写切换




*/
}
