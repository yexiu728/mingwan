package study.day7;

public class Test0 {

/*
Test1
    继承extends：
        就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。
        子类可以直接 访问父 类中的非私有的属性和行为。
        好处
            1. 提高代码的复用性。
            2. 类与类之间产生了关系，是多态的前提。
        父类不可被继承的内容
            1. 被private修饰的
            2. 构造方法不能继承

    继承后的特点——成员变量：
        子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，
        需要使用 super 关键字，修饰父类成员变量。
    继承后的特点——方法重写 ：
        子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），
        会出现覆盖效果，也称为重写或者复写。声明不变，重新实现。
    继承后的特点——构造方法：
        1. 构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。
        2. 构造方法的作用是初始化成员变量的。所以子类的初始化过程中，必须先执行父类的初始化动作。
            子类的构造方法中默认有一个super()，表示调用父类的构造方法，
            父类成员变量初始化后，才可以给子类使用。
        3. 继承后子类构造方法特点：子类所有构造方法都会调用父类的无参构造

    super和this
        super ：代表父类的存储空间标识(可以理解为父亲的引用)。
        this ：代表当前对象的引用(谁调用就代表谁)。

        this.成员变量 ‐‐ 本类的
        super.成员变量 ‐‐ 父类的
        this.成员方法名() ‐‐ 本类的
        super.成员方法名() ‐‐ 父类的

        this(...) ‐‐ 本类的构造方法
        super(...) ‐‐ 父类的构造方法
            子类的每个构造方法中均有默认的super()，调用父类的空参构造。
            手动调用父类构造会覆盖默认的super()。
            super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。

    继承的特点
        1. Java只支持单继承，不支持多继承。
        2. 一个类可以有多个子类。
        3. Java支持多层继承(继承体系)。
            顶层父类是Object类。所有的类默认继承Object，作为父类。
        4. 子类和父类是一种相对的概念。

    老师笔记
        1.子类只能继承父类非私有的属性和行为，构造方法不能继承
        2.如果子类和父类中出现重名的成员方法叫做方法重写 (Override)
        3.重写和重载的特征，区别？
        4.子类方法覆盖父类方法，必须要保证权限大于等于父类权限
        5.继承后子类构造方法特点:子类所有构造方法（包含无参和有参）都会默认调用父类的无参构造（supper()）
        6.子类的初始化过程中，必须先执行父类的初始化动作，然后在执行子类的初始化动作
        7.supper和this的用法
        8.super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现
        9.单继承多实现

Test2：
    抽象方法：没有方法体的方法。
        使用 abstract 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。
    抽象类：包含抽象方法的类。
        如果一个类包含抽象方法，那么该类必须是抽象类。
        使用abstract 修饰的类就是抽象类。
        抽象类不一定有抽象方法。

    抽象类的特征：
        1、如果类包含抽象方法，那么这个类必须被声明为抽象类
        2、抽象类不一定要包含抽象方法
        3、子类要么实现父类中所有的抽象方法，要么声明成抽象类
        4、抽象类不能实例化(new)，实现类可以实例化


        Ctrl + O 重写父类方法

*/

}
